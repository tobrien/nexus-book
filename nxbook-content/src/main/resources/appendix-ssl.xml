<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.discursive.com/docbook/xml/4.5/docbookx.dtd">
<appendix id="client-cert">
  <title>Configuring Nexus for SSL</title>

  <section id="client-cert-sect-introduction">
    <title>Introduction</title>

    <para><indexterm>
        <primary>Secure Sockets Layer (SSL)</primary>
      </indexterm><indexterm>
        <primary>Transport Layer Security (TLS)</primary>
      </indexterm><indexterm>
        <primary>network configuration</primary>

        <secondary>SSL configuration</secondary>
      </indexterm>This chapter contains two sections: the first section
    details a procedure for connecting Nexus to a remote repository which
    requires client-side SSL certificates and the second section details the
    configuration for serving SSL directly from Nexus. When you set up a
    repository manager for a team of developers spread out over a variety of
    locations both internal and external to a corporate network, you will
    likely want to secure your repository using SSL. The instructions in this
    chapter assume that you are running Nexus embedded in Jetty.</para>
  </section>

  <section id="sect-ssl-client-cert">
    <title>Importing a SSL Client Certificate</title>

    <para><indexterm>
        <primary>network configuration</primary>

        <secondary>importing an SSL certificate</secondary>
      </indexterm>If you need to configure Nexus to proxy a remote repository
    which requires a SSL Client Certificate, you'll need to import the
    certificate included with your Nexus license into the JVM used to run your
    Nexus instance. To make this process simpler, you can use our import-ssl
    tool. We've created a simple command-line utility which automates the
    process of loading the Server SSL Chain and the client certificate into a
    JVM.</para>

    <section>
      <title>Downloading the SSL Import Tool</title>

      <para><indexterm>
          <primary>SSL Import Tool</primary>
        </indexterm>The import-ssl tool can be downloaded from: <ulink
      url="http://central.sonatype.com/help/import-ssl.jar">http://central.sonatype.com/help/import-ssl.jar</ulink>.</para>
    </section>

    <section>
      <title>Importing a Client Certificate</title>

      <para><indexterm>
          <primary>network configuration</primary>

          <secondary>importing a client certificate</secondary>
        </indexterm>Importing a client certificate involves two steps:
      importing the server's SSL chain and importing the client SSL
      key/certificate pair. Some notes about the location of the keystore and
      default keystore passwords:</para>

      <itemizedlist>
        <listitem>
          <para>If you are using the default JSSE keystore locations on either
          a GNU/Linux or OS X platform, you must run the commands below as the
          root user. You can do this either by changing to the root user (su
          -), or by using the sudo command: sudo [command].</para>
        </listitem>

        <listitem>
          <para>The default password used by Java for the built-in keystores
          is changeit. If your keystore uses a different password, you'll need
          to specify that password as the last parameter on the command lines
          above.</para>
        </listitem>

        <listitem>
          <para>If you want to specify your own keystore location, provide
          that in place of &lt;keystore_dir&gt; in the examples below.</para>
        </listitem>

        <listitem>
          <para>If you're using a password other than 'changeit' for your
          keystore, you should supply it immediately following the keystore
          path in the commands below.</para>
        </listitem>

        <listitem>
          <para>If you specify a keystore location that doesn't exist, the
          import-ssl utility will create it on-demand.</para>
        </listitem>
      </itemizedlist>

      <para>Before you begin the process of importing a Server SSL Chain and a
      client certificate you will need three things:</para>

      <itemizedlist>
        <listitem>
          <para>Network access to the SSL server you are connecting to,</para>
        </listitem>

        <listitem>
          <para>An SSL client certificate,</para>
        </listitem>

        <listitem>
          <para>and a certificate password.</para>
        </listitem>
      </itemizedlist>

      <section>
        <title>Import the Server SSL Chain</title>

        <para>The first command imports the entire self-signed SSL certificate
        chain for central.sonatype.com into your JSSE keystore:</para>

        <screen>$ <command>java -jar import-ssl.jar server central.sonatype.com \
      &lt;keystore_dir&gt;</command>
</screen>

        <para>You would substitute the server name used in the previous
        listing with the server name you are attempting to connect to. This
        particular command will connect to https://central.sonatype.com,
        retrieve, and import the server's SSL certificate chain.</para>
      </section>

      <section>
        <title>Import the Client SSL Key/Certificate Pair</title>

        <para>The second command imports your client-side SSL certificate into
        the JSSE keystore, so Nexus can send it along to the server for
        authentication:</para>

        <screen>$ <command>java -jar import-ssl.jar client &lt;your-certificate.p12&gt; \
      &lt;your-certificate-password&gt; &lt;keystore_dir&gt;</command>
</screen>

        <para>When the client command completes, you should see a line
        containing the keystore path, like the one that follows. This path is
        important; you will use it in your Nexus configuration below, so make
        a note of it!</para>

        <screen>...
Writing keystore: /System/Library/Frameworks/JavaVM.framework/\
Versions/1.6.0/Home/lib/security/jssecacerts
</screen>
      </section>
    </section>

    <section>
      <title>Configuring Nexus Startup</title>

      <para><indexterm>
          <primary>network configuration</primary>

          <secondary>configuring keystore</secondary>
        </indexterm>Once both sets of SSL certificates are imported to your
      keystore, you can modify the Nexus
      \<filename>${NEXUS_HOME}/conf/wrapper.conf</filename> file to inject the
      JSSE system properties necessary to use these certificates, as seen
      below.</para>

      <note>
        <para>In the following example, line prefixes like
        wrapper.java.additional.4 are meant to be appended to the existing
        wrapper.java.additional.* lines in the
        <filename>wrapper.conf</filename> file. In future versions of Nexus,
        new JVM command-line arguments may be specified in this file. In such
        a case, where the specific numbers '4' and '5' may be taken, simply
        increment and use the next two unused numbers.</para>
      </note>

      <screen>wrapper.java.additional.4=-Djavax.net.ssl.keyStore=&lt;keystore_dir&gt;
wrapper.java.additional.5=-Djavax.net.ssl.keyStorePassword=&lt;keystore_password&gt;
</screen>

      <para>Once you have configured the Nexus startup option shown above,
      restart Nexus and attempt to proxy a remote repository which requires an
      SSL client certificate. Nexus will use the keystore location and
      keystore password to configure the SSL interaction to accept the
      server's SSL certificate and send the appropriate client SSL
      certificate.</para>
    </section>
  </section>

  <section id="sect-ssl-ssl-direct">
    <title>Configuring Nexus to Serve SSL</title>

    <para><indexterm>
        <primary>network configuration</primary>

        <secondary>SSL configuration</secondary>
      </indexterm>If you need to serve repository content using SSL, you can
    always proxy Nexus with a server like Apache httpd. Apache httpd can
    easily be configured to serve SSL content using mod_ssl, and there is a
    large amount of reference material available for configuring httpd to
    serve secure content. Jetty can also be configured to serve SSL content
    directly, and if you would like to avoid the extra work of putting a web
    server like Apache httpd in front of Nexus, this section shows you how to
    do that. To configure Nexus to serve SSL directly to clients, you'll need
    to perform the following steps.</para>

    <note>
      <para>All examples given here can be found <ulink
      url="http://svn.sonatype.org/nexus/trunk/nexus/nexus-webapp/src/main/assembly/base-bundle/conf/examples">in
      Nexus Subversion</ulink>, or in the Nexus distribution under
      <filename>\$(NEXUS_HOME)/conf/examples</filename>. Before you customize
      your Nexus configuration to serve SSL, keep in mind the
      following:<itemizedlist>
          <listitem>
            <para>Customizations in this Appendix assume that your are running
            Nexus ${nexusopen.version}.</para>
          </listitem>

          <listitem>
            <para>Any custom Jetty configuration must be contained in the
            <filename>\$(NEXUS_HOME)/conf/jetty.xml</filename> file, or else
            in the location referenced by the <filename>jetty.xml</filename>
            property in
            <filename>\$(NEXUS_HOME)/conf/plexus.properties</filename> (in
            case you've customized this location).</para>
          </listitem>

          <listitem>
            <para>While the instructions below will work with Nexus Open
            Source, these instructions assume the filesystem of Nexus
            Professional. If you are missing Jetty JAR files, you should
            obtain them from the Jetty project page: <ulink
            url="http://www.mortbay.org/jetty/">http://www.mortbay.org/jetty/</ulink>.</para>
          </listitem>
        </itemizedlist></para>
    </note>

    <section>
      <title>Configure the Java Keystore</title>

      <para><indexterm>
          <primary>network configuration</primary>

          <secondary>configuring keystore</secondary>
        </indexterm>Follow the instructions on the <ulink
      url="http://docs.codehaus.org/display/JETTY/How+to+configure+SSL">How to
      configure SSL</ulink> on the Jetty Wiki to setup the appropriate keys
      and certificates in a form that Jetty can use. Pay particular attention
      to steps 1-3, and the section at the bottom called Password
      Issues.</para>

      <para>The jetty-util jar and the main Jetty jar can be found in
      <filename>\${NEXUS_HOME}/runtime/apps/lib/nexus</filename>. The command
      line used to import an OpenSSL key+cert in PKCS12 format is:</para>

      <screen>$ <command>java -classpath jetty-util-6.1.12.jar:jetty-6.1.12.jar \
    org.mortbay.jetty.security.PKCS12Import &lt;pkcs12-file&gt; &lt;keystore&gt;</command> </screen>

      <para>The command line used to generate an obfuscated password hash
      is:</para>

      <screen>$ <command>java -classpath jetty-util-6.1.12.jar:jetty-6.1.12.jar \
    org.mortbay.jetty.security.Password &lt;your-password&gt;</command>
&lt;your-password&gt;
OBF:1t2x1toq1to41t39
MD5:6f1ed002ab5595859014ebf0951522d9 </screen>

      <para>The OBF line in the previous output will be used in the jetty.xml
      three times. You'll need to run the previous command three times to
      generate the obfuscated hashcodes for three passwords:</para>

      <itemizedlist>
        <listitem>
          <para>The Key Password</para>
        </listitem>

        <listitem>
          <para>The Trust Store Password</para>
        </listitem>

        <listitem>
          <para>The Key Store Password</para>
        </listitem>
      </itemizedlist>

      <para>In the next section, the key store and trust store are the same
      file, with the same password.</para>
    </section>

    <section>
      <title>Configure Nexus/Jetty to Use the New Keystore</title>

      <note>
        <para>A <filename>jetty.xml</filename> with the modifications in this
        section can be found in
        <filename>\${NEXUS_HOME}/conf/examples/jetty-ssl.xml</filename>,
        inside your Nexus distribution.</para>
      </note>

      <para><indexterm>
          <primary>network configuration</primary>

          <secondary>Jetty SSL configuration</secondary>
        </indexterm>Modify the <ulink
      url="https://docs.sonatype.com/display/NX/Jetty+Configuration#JettyConfiguration-Equivalentbasejetty.xml">nexus-equivalent
      jetty.xml</ulink> to replace this:</para>

      <programlisting>&lt;Call name="addConnector"&gt;
    &lt;Arg&gt;
        &lt;New class="org.mortbay.jetty.nio.SelectChannelConnector"&gt;
          &lt;Set name="host"&gt;${application-host}&lt;/Set&gt;
          &lt;Set name="port"&gt;${application-port}&lt;/Set&gt;
        &lt;/New&gt;
    &lt;/Arg&gt;
&lt;/Call&gt;
</programlisting>

      <para>with this:</para>

      <programlisting>&lt;Call name="addConnector"&gt;
    &lt;Arg&gt;
        &lt;New class="org.mortbay.jetty.security.SslSelectChannelConnector"&gt;
            &lt;Set name="host"&gt;${application-host}&lt;/Set&gt;
            &lt;Set name="port"&gt;${application-port}&lt;/Set&gt;
            &lt;Set name="maxIdleTime"&gt;30000&lt;/Set&gt;
            &lt;Set name="keystore"&gt;/etc/ssl/keystore&lt;/Set&gt;
            &lt;Set name="truststore"&gt;/etc/ssl/keystore&lt;/Set&gt;
            &lt;Set name="password"&gt;OBF:1v2j1uum1xtv1zej1zer1xtn1uvk1v1v&lt;/Set&gt;
            &lt;Set name="keyPassword"&gt;OBF:1v2j1uum1xtv1zej1zer1xtn1uvk1v1v&lt;/Set&gt;
            &lt;Set name="trustPassword"&gt;OBF:1v2j1uum1xtv1zej1zer1xtn1uvk1v1v&lt;/Set&gt;
        &lt;/New&gt;
    &lt;/Arg&gt;
&lt;/Call&gt;
</programlisting>
    </section>

    <section>
      <title>Modify the application-port for SSL connections</title>

      <para>The application-port property, referenced in the configuration
      above, has a default configuration that many people would more naturally
      associate with non-SSL connections. You may wish to modify this port to
      something like 8443, or even 443 (if you have root access from which to
      start Nexus). To change this property, modify the
      <filename>\$(basedir)/conf/plexus.properties</filename> file.</para>

      <note>
        <para>You may wish to enable both types of connections, with
        appropriate rewrite rules between them. Such a configuration is beyond
        the scope of this section; if you're interested, please refer to the
        <ulink url="http://docs.codehaus.org/display/JETTY/Jetty+Wiki">Jetty
        Wiki</ulink> for some information to get you started. Additionally,
        you may need to add extra port properties to the plexus.properties
        configuration file to accommodate both SSL and non-SSL
        connections.</para>
      </note>
    </section>
  </section>

  <section id="sect-ssl-redirecting">
    <title>Redirecting Non-SSL Connections to SSL</title>

    <para><indexterm>
        <primary>network configuration</primary>

        <secondary>redirecting to SSL</secondary>
      </indexterm>If you want to make it very easy for people to use your
    Nexus repository, you will want to configure the automatic redirect from
    the non-SSL port (default 80) to the SSL port (default 443). When this
    feature is configured, browsers and clients that attempt to interact with
    the non-SSL port will be seamlessly redirected to the SSL port. If you do
    not turn on the automatic redirect to SSL, users who attempt to load the
    Nexus interface via the default port 80 will see a network error.</para>

    <para>If you are proxying your Nexus instance with a web server like
    Apache httpd, you could configure mod_rewrite to automatically redirect
    browsers to the SSL port, or you can configure Jetty to perform this
    redirection. To do this in Jetty you use a custom rewrite rule for Jetty
    that is bundled with Nexus, inside the <varname>plexus-jetty6</varname>
    library found in
    <filename>\${NEXUS_HOME}/runtime/apps/nexus/lib</filename>.</para>

    <para>To enable this feature, configure Jetty to serve SSL directly as
    demonstrated in <xref linkend="sect-ssl-ssl-direct" />. After you having
    configured Jetty to serve SSL directly, open your jetty.xml and replace
    the existing handler/context-collection declaration with a standalone
    context-collection declaration, by replacing this section:</para>

    <programlisting>&lt;Set name="handler"&gt;
  &lt;New id="Contexts" class="org.mortbay.jetty.handler.ContextHandlerCollection"&gt;
    &lt;!-- The following configuration is REQUIRED, and MUST BE FIRST.
         It makes the Plexus container available for use in the Nexus webapp. --&gt;
    &lt;Call name="addLifeCycleListener"&gt;
      &lt;Arg&gt;
        &lt;New 
         class="org.sonatype.plexus.jetty.custom.InjectExistingPlexusListener" /&gt;
      &lt;/Arg&gt;
    &lt;/Call&gt;

    &lt;!-- The following configuration disables JSP taglib support, 
         the validation of which slows down Jetty's startup significantly. --&gt;
    &lt;Call name="addLifeCycleListener"&gt;
      &lt;Arg&gt;
        &lt;New class="org.sonatype.plexus.jetty.custom.DisableTagLibsListener" /&gt;
      &lt;/Arg&gt;
    &lt;/Call&gt;
  &lt;/New&gt;
&lt;/Set&gt;
</programlisting>

    <para>with this one:</para>

    <programlisting>&lt;New id="Contexts" class="org.mortbay.jetty.handler.ContextHandlerCollection"&gt;
  &lt;!-- The following configuration is REQUIRED, and MUST BE FIRST.
       It makes the Plexus container available for use in the Nexus webapp. --&gt;
  &lt;Call name="addLifeCycleListener"&gt;
    &lt;Arg&gt;
      &lt;New 
         class="org.sonatype.plexus.jetty.custom.InjectExistingPlexusListener" /&gt;
    &lt;/Arg&gt;
  &lt;/Call&gt;

  &lt;!-- The following configuration disables JSP taglib support, the 
       validation of which slows down Jetty's startup significantly. --&gt;
  &lt;Call name="addLifeCycleListener"&gt;
    &lt;Arg&gt;
      &lt;New class="org.sonatype.plexus.jetty.custom.DisableTagLibsListener" /&gt;
    &lt;/Arg&gt;
  &lt;/Call&gt;
&lt;/New&gt;
</programlisting>

    <para>Now, configure the rewrite handler for Jetty by adding the following
    section just above the line with <varname>stopAtShutdown</varname> in
    it:</para>

    <programlisting>&lt;Set name="handler"&gt;
  &lt;New id="Handlers" class="org.mortbay.jetty.handler.rewrite.RewriteHandler"&gt;
    &lt;Set name="rules"&gt;
      &lt;Array type="org.mortbay.jetty.handler.rewrite.Rule"&gt;
        &lt;Item&gt;
          &lt;New id="redirecedHttps"
               class="org.sonatype.plexus.jetty.custom.RedirectToHttpsRule"&gt;
            &lt;Set name="httpsPort"&gt;${application-port-ssl}&lt;/Set&gt;
          &lt;/New&gt;
        &lt;/Item&gt;
      &lt;/Array&gt;
    &lt;/Set&gt;
    &lt;Set name="handler"&gt;
      &lt;New id="Handlers" class="org.mortbay.jetty.handler.HandlerCollection"&gt;
        &lt;Set name="handlers"&gt;
          &lt;Array type="org.mortbay.jetty.Handler"&gt;
            &lt;Item&gt;&lt;Ref id="Contexts"/&gt;&lt;/Item&gt;
            &lt;Item&gt;
              &lt;New id="DefaultHandler" 
                   class="org.mortbay.jetty.handler.DefaultHandler"/&gt;&lt;/Item&gt;
            &lt;Item&gt;
              &lt;New id="RequestLog" 
                   class="org.mortbay.jetty.handler.RequestLogHandler"/&gt;&lt;/Item&gt;
          &lt;/Array&gt;
        &lt;/Set&gt;
      &lt;/New&gt;
    &lt;/Set&gt;
  &lt;/New&gt;
&lt;/Set&gt;
</programlisting>

    <para>Modify <filename>\${NEXUS_HOME}/conf/plexus.properties</filename>
    and add a new property, <varname>application-port-ssl</varname>. This will
    allow you to customize both the SSL and non-SSL ports
    independently:</para>

    <programlisting>application-port-ssl=8443
</programlisting>
  </section>
</appendix>
