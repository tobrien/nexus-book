<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.discursive.com/docbook/xml/4.5/docbookx.dtd">
<chapter id="maven">
  <title>Configuring Maven to Use Nexus</title>

  <section id="maven-sect-conf-maven-nexus">
    <title>Introduction</title>

    <para><indexterm>
        <primary>Apache Maven</primary>

        <secondary>configuring repository mirrors</secondary>
      </indexterm><indexterm>
        <primary>Apache Maven</primary>

        <secondary>settings for Nexus</secondary>
      </indexterm>To use Nexus, you will configure Maven to check Nexus
    instead of the public repositories. To do this, you'll need to edit your
    mirror settings in your <filename>~/.m2/settings.xml</filename> file.
    First, we're going to demonstrate how to configure Maven to consult your
    Nexus installation instead of retrieving artifacts directly from the Maven
    Central repository. After we override the central repository and
    demonstrate that Nexus is working, we'll circle back to provide a more
    sensible set of settings that will cover both releases and
    snapshots.</para>
  </section>

  <section id="maven-sect-single-group">
    <title>Configuring Maven to Use a Single Nexus Group</title>

    <para><indexterm>
        <primary>Apache Maven</primary>

        <secondary>settings for Nexus</secondary>
      </indexterm><indexterm>
        <primary>Apache Maven</primary>

        <secondary>settings.xml</secondary>
      </indexterm>If you are adopting Nexus for internal development you
    should configure a single Nexus group which contains both releases and
    snapshots. To do this, add snapshot repositories to your public group, and
    add the following mirror configuration to your Maven settings in
    <filename>~/.m2/settings.xml</filename>.</para>

    <example id="ex-maven-nexus-simple">
      <title>Configuring Maven to Use a Single Nexus Group</title>

      <programlisting language="xml">&lt;settings&gt;
  &lt;mirrors&gt;
    &lt;mirror&gt;
      &lt;!--This sends everything else to /public --&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;
      &lt;url&gt;http://localhost:8081/nexus/content/groups/public&lt;/url&gt;
    &lt;/mirror&gt;
  &lt;/mirrors&gt;
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;!--Enable snapshots for the built in central repo to direct --&gt;
      &lt;!--all requests to nexus via the mirror --&gt;
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;central&lt;/id&gt;
          &lt;url&gt;http://central&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/repository&gt;
      &lt;/repositories&gt;
     &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
          &lt;id&gt;central&lt;/id&gt;
          &lt;url&gt;http://central&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/pluginRepository&gt;
      &lt;/pluginRepositories&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
  &lt;activeProfiles&gt;
    &lt;!--make the profile active all the time --&gt;
    &lt;activeProfile&gt;nexus&lt;/activeProfile&gt;
  &lt;/activeProfiles&gt;
&lt;/settings&gt;</programlisting>

      <para>In <xref linkend="ex-maven-nexus-simple" /> we have defined a
      single profile: <varname>nexus</varname>. The <varname>nexus</varname>
      profile is configured to download from the central repository with a
      bogus <acronym>URL</acronym> of <varname>http://central</varname>. This
      <acronym>URL</acronym> is overridden by the mirror setting in the same
      <filename>settings.xml</filename> file to point to the URL of your
      single Nexus group. The <varname>nexus</varname> group is then listed as
      an active profile in the <sgmltag>activeProfiles</sgmltag>
      element.</para>
    </example>
  </section>

  <section id="maven-sect-custom-for-missing">
    <title>Adding Custom Repositories for Missing Dependencies</title>

    <para>If you've configured your Maven <filename>settings.xml</filename> to
    list the Nexus public group as a mirror for all repositories, you might
    encounter projects which are unable to retrieve artifacts from your local
    Nexus installation. This usually happens because you are trying to build a
    project which has defined a custom set of <varname>repositories</varname>
    and <varname>snapshotRepositories</varname> in a
    <filename>pom.xml</filename>. When you encounter a project which contains
    a custom repository element in a pom.xml add this repository to Nexus as a
    new proxy repository and then add the new proxy repository to the public
    group.</para>
  </section>

  <section id="maven-sect-adding">
    <title>Adding a New Repository</title>

    <para><indexterm>
        <primary>Nexus Repository</primary>

        <secondary>creating</secondary>
      </indexterm>To add a repository, log into Nexus as an Administrator, and
    click on the Repositories link in the left-hand navigation menu in the
    Views/Repositories section. Clicking on this link should bring up a window
    that lists all of the repositories which Nexus knows about. You'll then
    want to create a new proxy repository. To do this, click on the Add link
    that is directly above the list of repositories. When you click the Add
    button, click the down arrow directly to the right of the word Add, this
    will show a drop-down which has the options: Hosted Repository, Proxy
    Repository, Virtual Repository, and Repository Group. Since you are
    creating a proxy repository, click on <indexterm>
        <primary>Nexus Repository</primary>

        <secondary>create a proxy repository</secondary>
      </indexterm>Proxy Repository.</para>

    <figure>
      <title>Creating a New Nexus Proxy Repository</title>

      <screenshot>
        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/repository-manager_add-repository-dropdown.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/repository-manager_add-repository-dropdown.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </screenshot>
    </figure>

    <para>Once you do this, you will see a screen resembling <xref
    linkend="fig-add-repo" />. Populate the required fields Repository ID and
    the Repository Name with "caja" and "Google Caja". Set the Repository
    Policy to "Release", and the Remote Storage Location to <ulink
    url="http://google-caja.googlecode.com/svn/maven">http://google-caja.googlecode.com/svn/maven</ulink>.</para>

    <figure id="fig-add-repo">
      <title>Adding a Nexus Repository</title>

      <screenshot>
        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/repository-manager_add-repository.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/repository-manager_add-repository.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </screenshot>
    </figure>

    <para>Once you've filled out this screen, click on the
    <guibutton>Save</guibutton> button. Nexus will then be configured with the
    caja proxy repository. Do the same thing for the oauth repository. Create
    a repository with the Repository ID of oauth, with a Release policy, and
    the Remote Storage Location of <ulink
    url="http://oauth.googlecode.com/svn/code/maven">http://oauth.googlecode.com/svn/code/maven</ulink>.</para>
  </section>

  <section id="maven-sect-adding-to-group">
    <title>Adding a Repository to a Group</title>

    <para><indexterm>
        <primary>Nexus Repository Group</primary>

        <secondary>adding a repository</secondary>
      </indexterm>Next you will need to add both of these new repositories to
    the public Nexus Group. To do this, click on the Repositories link in the
    left-hand navigation menu in the Views/Repositories section. Nexus lists
    Groups and Repositories in the same list so click on the public group.
    After clicking on the public group, you should see the Browse and
    Configuration tabs in the lower half of the Nexus window.</para>

    <note>
      <para>If you click on a repository or a group in the Repositories list
      and you do not see the Configuration tab, this is because your Nexus
      user does not have administrative privileges. To perform the
      configuration tasks outlined in this chapter, you will need to be logged
      in as a user with administrative privileges.</para>
    </note>

    <para>Clicking on the Configuration tab will bring up a screen which looks
    like <xref linkend="fig-add-to-group" />.</para>

    <figure id="fig-add-to-group">
      <title>Adding New Repositories to a Nexus Group</title>

      <screenshot>
        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/repository-manager_add-to-group.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/repository-manager_add-to-group.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </screenshot>
    </figure>

    <para>To add the two new repositories to the <varname>public</varname>
    Nexus Group, find the repositories in the Available Repositories list on
    the right, click on the repository you want to add and drag it to the left
    to the Ordered Group Repositories list. Once the repository is in the
    Ordered Group Repositories list you can click and drag the repository
    within that list to alter the order in which a repository will be searched
    for a matching artifact. Once the Google Caja and Google OAuth project
    repositories are added to the public Nexus Group, you should be able to
    build Apache Shindig and watch Maven download the Caja and OAuth artifacts
    from the respective repositories.</para>

    <note>
      <para>Nexus makes use of an interesting Javascript widget library named
      <ulink url="http://extjs.com/">ExtJS</ulink>. ExtJS provides for a
      number of interesting UI widgets that allow for rich interaction like
      the drag-drop UI for adding repositories to a group and reordering the
      contents of a group.</para>
    </note>

    <para>In the last few sections, you encountered a situation where you
    needed to add two custom repositories to a build in order to download two
    libraries (Google Caja and Google OAuth) which are not available in the
    Maven Central repository. If you were not using a repository manager, you
    would have added these repositories to the repository element of your
    project's <acronym>POM</acronym>, or you would have asked all of your
    developers to modify <filename>~/.m2/settings.xml</filename> to reference
    two new repositories. Instead, you used the Nexus repository manager to
    add the two repositories to the public group. If all of the developers are
    configured to point to the public group in Nexus, you can freely swap in
    new repositories without asking your developers to change local
    configuration, and you've gained a certain amount of control over which
    repositories are made available to your development team.</para>
  </section>
</chapter>
